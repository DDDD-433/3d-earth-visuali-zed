<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Photorealistic 3D Earth Portfolio Demo</title>
  <style>
    html,body { margin:0; height:100%; background:#000; font-family:sans-serif; color:#fff; }
    #container { width:100vw; height:100vh; position:absolute; top:0; left:0; }
    #minimap { position:absolute; bottom:18px; right:18px; width:320px; height:220px; border:2px solid #fff; z-index:1000; border-radius:8px; box-shadow:0 2px 16px #000a; }
    #ui {
      position: absolute; top: 18px; left: 24px; z-index: 2000;
      background: rgba(0,0,0,0.55); padding: 12px 18px; border-radius: 8px;
      font-size: 15px; box-shadow: 0 2px 16px #000a;
    }
    #ui label { display: block; margin: 8px 0; cursor:pointer; }
    #ui input[type=range] { width: 120px; vertical-align: middle; }
    #title {
      position: absolute; top: 18px; right: 24px; color: #fff;
      font-size: 1.7rem; letter-spacing: 1px; text-shadow: 0 2px 8px #000a;
      z-index: 2000; font-weight: bold;
    }
    #loading {
      position:fixed; inset:0; display:flex; align-items:center; justify-content:center;
      background:#000; z-index:3000; font-size:1.5rem; letter-spacing:1px;
    }
    @media (max-width: 600px) {
      #minimap { width: 90vw; height: 30vh; right: 5vw; bottom: 5vw; }
      #ui { font-size: 13px; left: 8px; top: 8px; padding: 8px 10px; }
      #title { font-size: 1.1rem; right: 10px; top: 10px; }
    }
  </style>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
</head>
<body>
  <div id="loading">Loading Earthâ€¦</div>
  <div id="container"></div>
  <div id="minimap"></div>
  <div id="ui">
    <label>
      <input type="checkbox" id="animateClouds" checked/> Animate Clouds
    </label>
    <label>
      <input type="checkbox" id="showAtmosphere" checked/> Atmosphere
    </label>
    <label>
      <input type="range" id="sunDir" min="0" max="360" value="45"/> Sun Direction
    </label>
  </div>
  <div id="title">Photorealistic Interactive 3D Earth</div>
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script type="importmap">
    {
      "imports": {
        "three": "https://unpkg.com/three@0.162.0/build/three.module.js",
        "three/addons/": "https://unpkg.com/three@0.162.0/examples/jsm/"
      }
    }
  </script>
  <script type="module">
  import * as THREE from 'three';
  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
  import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
  import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
  import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
  import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';

  // --- Three.js Setup ---
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(45, innerWidth/innerHeight, 0.1, 1000);
  camera.position.set(0, 0, 3.5);

  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(innerWidth, innerHeight);
  renderer.setPixelRatio(devicePixelRatio);
  renderer.toneMapping = THREE.ACESFilmicToneMapping;
  renderer.toneMappingExposure = 0.8;
  // Ensure #container is visible and sized
  const container = document.getElementById('container');
  container.style.display = 'block';
  container.style.width = '100vw';
  container.style.height = '100vh';
  container.style.position = 'absolute';
  container.style.top = '0';
  container.style.left = '0';
  // Append renderer to container
  container.appendChild(renderer.domElement);

  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;
  controls.minDistance = 2.2;
  controls.maxDistance = 10;
  controls.enablePan = false;

  // Lighting
  const sun = new THREE.DirectionalLight(0xffffff, 2.5);
  sun.position.set(1, 0.8, 1);
  scene.add(sun);
  scene.add(new THREE.AmbientLight(0x222233, 0.7));

  // Earth
  const earthGroup = new THREE.Group();
  scene.add(earthGroup);

  const earthGeo = new THREE.SphereGeometry(1, 128, 128);
  const loader = new THREE.TextureLoader();
  const earthMat = new THREE.MeshPhongMaterial({
    map: loader.load('https://threejs.org/examples/textures/planets/earth_atmos_2048.jpg'),
    bumpMap: loader.load('https://threejs.org/examples/textures/planets/earth_normal_2048.jpg'),
    bumpScale: 0.03,
    specularMap: loader.load('https://threejs.org/examples/textures/planets/earth_specular_2048.jpg'),
    shininess: 10
  });
  const earth = new THREE.Mesh(earthGeo, earthMat);
  earthGroup.add(earth);

  // Night lights
  const nightMat = new THREE.MeshBasicMaterial({
    map: loader.load('https://threejs.org/examples/textures/planets/earth_lights_2048.png'),
    blending: THREE.AdditiveBlending,
    transparent: true,
    opacity: 0.7
  });
  const nightMesh = new THREE.Mesh(earthGeo, nightMat);
  nightMesh.scale.set(1.001, 1.001, 1.001);
  earthGroup.add(nightMesh);

  // Clouds
  const cloudGeo = new THREE.SphereGeometry(1.003, 128, 128);
  const cloudMat = new THREE.MeshPhongMaterial({
    map: loader.load('https://threejs.org/examples/textures/planets/earth_clouds_1024.png'),
    transparent: true,
    opacity: 0.6,
    depthWrite: false
  });
  const clouds = new THREE.Mesh(cloudGeo, cloudMat);
  earthGroup.add(clouds);

  // --- Dynamic Country Labels ---
  const labelContainer = document.createElement('div');
  labelContainer.style.position = 'absolute';
  labelContainer.style.top = '0';
  labelContainer.style.left = '0';
  labelContainer.style.pointerEvents = 'none';
  labelContainer.style.width = '100vw';
  labelContainer.style.height = '100vh';
  labelContainer.style.zIndex = '3001';
  document.body.appendChild(labelContainer);

  let countryLabels = [];
  let countryCentroids = [];

  async function setupCountryLabels() {
    const response = await fetch('https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json');
    const data = await response.json();
    data.features.forEach(feature => {
      let coords = [];
      if (feature.geometry.type === 'Polygon') {
        coords = feature.geometry.coordinates[0];
      } else if (feature.geometry.type === 'MultiPolygon') {
        coords = feature.geometry.coordinates[0][0];
      }
      if (coords && coords.length > 0 && feature.properties && feature.properties.name) {
        let lon = 0, lat = 0;
        coords.forEach(c => { lon += c[0]; lat += c[1]; });
        lon /= coords.length;
        lat /= coords.length;
        // Convert lon/lat to 3D position on globe
        const phi = (90 - lat) * (Math.PI / 180);
        const theta = (lon + 180) * (Math.PI / 180);
        const x = -1.01 * Math.sin(phi) * Math.cos(theta);
        const y = 1.01 * Math.cos(phi);
        const z = 1.01 * Math.sin(phi) * Math.sin(theta);
        countryCentroids.push(new THREE.Vector3(x, y, z));
        // Create label div
        const label = document.createElement('div');
        label.textContent = feature.properties.name;
        label.style.position = 'absolute';
        label.style.color = '#00ff99';
        label.style.fontWeight = 'bold';
        label.style.fontSize = '13px';
        label.style.textShadow = '0 2px 8px #000a';
        label.style.pointerEvents = 'none';
        label.style.whiteSpace = 'nowrap';
        label.style.display = 'none';
        labelContainer.appendChild(label);
        countryLabels.push(label);
      }
    });
  }
  setupCountryLabels();

  function updateCountryLabels() {
    const width = window.innerWidth;
    const height = window.innerHeight;
    for (let i = 0; i < countryLabels.length; ++i) {
      const pos = countryCentroids[i].clone();
      pos.applyMatrix4(earthGroup.matrixWorld);
      // Check if facing camera
      const camDir = camera.position.clone().sub(scene.position).normalize();
      const dot = pos.clone().normalize().dot(camDir);
      if (dot > 0.25) { // Only show if facing camera
        // Project to screen
        const projected = pos.project(camera);
        const x = (projected.x * 0.5 + 0.5) * width;
        const y = (-projected.y * 0.5 + 0.5) * height;
        countryLabels[i].style.transform = `translate(-50%, -50%) translate(${x}px,${y}px)`;
        countryLabels[i].style.display = 'block';
      } else {
        countryLabels[i].style.display = 'none';
      }
    }
  }
  window.addEventListener('resize', updateCountryLabels);

  // Atmosphere (shader)
  const atmosGeo = new THREE.SphereGeometry(1.05, 128, 128);
  const atmosMat = new THREE.ShaderMaterial({
    uniforms: {
      c: { value: new THREE.Vector3(0.3, 0.6, 1.0) },
      power: { value: 6.0 },
      glowColor: { value: new THREE.Color(0x93c5fd) },
      viewVector: { value: camera.position }
    },
    vertexShader: `
      uniform vec3 viewVector;
      varying float intensity;
      void main() {
        vec3 vNormal = normalize(normalMatrix * normal);
        vec3 vNormel = normalize(normalMatrix * viewVector);
        intensity = pow(0.7 - dot(vNormal, vNormel), 2.0);
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      uniform vec3 glowColor;
      varying float intensity;
      void main() {
        vec3 glow = glowColor * intensity;
        gl_FragColor = vec4(glow, 1.0);
      }
    `,
    side: THREE.BackSide,
    blending: THREE.AdditiveBlending,
    transparent: true
  });
  const atmosphere = new THREE.Mesh(atmosGeo, atmosMat);
  scene.add(atmosphere);

  // --- Starfield ---
  const starGeo = new THREE.BufferGeometry();
  const starCount = 12000;
  const starPos = new Float32Array(starCount * 3);
  for (let i = 0; i < starCount * 3; i += 3) {
    starPos[i] = (Math.random() - 0.5) * 100;
    starPos[i + 1] = (Math.random() - 0.5) * 100;
    starPos[i + 2] = (Math.random() - 0.5) * 100;
  }
  starGeo.setAttribute('position', new THREE.BufferAttribute(starPos, 3));
  const starMat = new THREE.PointsMaterial({ color: 0xffffff, size: 0.15 });
  const stars = new THREE.Points(starGeo, starMat);
  scene.add(stars);

  // --- Post-processing (Bloom) ---
  const composer = new EffectComposer(renderer);
  composer.addPass(new RenderPass(scene, camera));
  composer.addPass(new UnrealBloomPass(new THREE.Vector2(innerWidth, innerHeight), 0.6, 0.5, 0.85));
  composer.addPass(new OutputPass());

  // --- Responsive Resize ---
  addEventListener('resize', () => {
    camera.aspect = innerWidth / innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(innerWidth, innerHeight);
    composer.setSize(innerWidth, innerHeight);
  });

  // --- UI Controls ---
  const animateCloudsEl = document.getElementById('animateClouds');
  const showAtmosphereEl = document.getElementById('showAtmosphere');
  const sunDirEl = document.getElementById('sunDir');

  animateCloudsEl.addEventListener('change', e => animateClouds = e.target.checked);
  showAtmosphereEl.addEventListener('change', e => atmosphere.visible = e.target.checked);
  sunDirEl.addEventListener('input', e => {
    const angle = e.target.value * Math.PI / 180;
    sun.position.set(Math.cos(angle), 0.5, Math.sin(angle));
  });

  let animateClouds = true;

  // --- Loading Screen ---

  // --- Country Boundaries (GeoJSON) ---
  async function addGeoJSONToGlobe() {
    const response = await fetch('https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json');
    const data = await response.json();
    const lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff99, linewidth: 1, transparent: true, opacity: 0.7 });
    data.features.forEach(feature => {
      const processPolygon = (coordinates) => {
        const points = [];
        coordinates[0].forEach(coord => {
          const lon = coord[0];
          const lat = coord[1];
          const phi = (90 - lat) * (Math.PI / 180);
          const theta = (lon + 180) * (Math.PI / 180);
          const x = - (1.008) * Math.sin(phi) * Math.cos(theta);
          const y = (1.008) * Math.cos(phi);
          const z = (1.008) * Math.sin(phi) * Math.sin(theta);
          points.push(new THREE.Vector3(x, y, z));
        });
        const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);
        const line = new THREE.Line(lineGeometry, lineMaterial);
        earthGroup.add(line);
      };
      if (feature.geometry.type === 'Polygon') {
        processPolygon(feature.geometry.coordinates);
      } else if (feature.geometry.type === 'MultiPolygon') {
        feature.geometry.coordinates.forEach(processPolygon);
      }
    });
  }
  addGeoJSONToGlobe();

  // --- Leaflet Minimap ---
  const map = L.map('minimap', { zoomControl: false, attributionControl: false }).setView([0, 0], 1);
  L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
    maxZoom: 8
  }).addTo(map);
  fetch('https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json')
    .then(res => res.json())
    .then(data => {
      L.geoJSON(data, {
        style: {
          color: '#00ff99',
          weight: 1,
          opacity: 0.7,
          fillOpacity: 0
        }
      }).addTo(map);
    });

  // --- Animate ---
  let firstRender = true;
  function animate() {
    requestAnimationFrame(animate);
    controls.update();
    earth.rotation.y += 0.0005;
    nightMesh.rotation.y += 0.0005;
    if (animateClouds) clouds.rotation.y += 0.0007;
    composer.render();
    updateCountryLabels();
    if (firstRender) {
      document.getElementById('loading').style.display = 'none';
      firstRender = false;
    }
  }
  animate();
  </script>
</body>
</html>
